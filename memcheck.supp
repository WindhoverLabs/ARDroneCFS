# Suppress warnings produced by Valgrind.
# http://wiki.wxwidgets.org/Valgrind_Suppression_File_Howto
{
   # This is required due to how the unit test harness initializes and 
   # reinitializes structs at runtime.  This is not a bug, but a false
   # positive.
   OS_BinSemDelete1
   Memcheck:Cond
   fun:OS_BinSemDelete
   fun:UT_os_apiinit_test
   fun:main
}

{
   # This is required to get around some printf compiler optimizations
   printf1
   Memcheck:Value4
   fun:_itoa_word
   fun:vfprintf
   fun:vsprintf
   fun:CFE_EVS_SendEvent
   fun:CF_VerifyCmdLength
   fun:CF_HousekeepingCmd
   fun:CF_AppPipe
   fun:Test_CF_HkCmdInvLen
   fun:UtTest_Run
   fun:main
}

{
   # This is required to get around some printf compiler optimizations
   printf2
   Memcheck:Cond
   fun:_itoa_word
   fun:vfprintf
   fun:vsprintf
   fun:CFE_EVS_SendEvent
   fun:CF_VerifyCmdLength
   fun:CF_HousekeepingCmd
   fun:CF_AppPipe
   fun:Test_CF_HkCmdInvLen
   fun:UtTest_Run
   fun:main
}

{
   # This is required to get around some printf compiler optimizations
   printf3
   Memcheck:Cond
   fun:vfprintf
   fun:vsprintf
   fun:CFE_EVS_SendEvent
   fun:CF_VerifyCmdLength
   fun:CF_HousekeepingCmd
   fun:CF_AppPipe
   fun:Test_CF_HkCmdInvLen
   fun:UtTest_Run
   fun:main
}

{
   # This is required to get around some printf compiler optimizations
   printf4
   Memcheck:Cond
   fun:vfprintf
   fun:vsprintf
   fun:CFE_EVS_SendEvent
   fun:CF_VerifyCmdLength
   fun:CF_HousekeepingCmd
   fun:CF_AppPipe
   fun:Test_CF_HkCmdInvLen
   fun:UtTest_Run
   fun:main
}

{
   # This is required to get around some printf compiler optimizations
   printf5
   Memcheck:Cond
   fun:vfprintf
   fun:vsprintf
   fun:CFE_EVS_SendEvent
   fun:CF_VerifyCmdLength
   fun:CF_HousekeepingCmd
   fun:CF_AppPipe
   fun:Test_CF_HkCmdInvLen
   fun:UtTest_Run
   fun:main
}

{
   # This is to supress a valid error that would normally signify
   # bad code.  However, this is encountered due to a negative
   # test.  The failure cannot be caught by the code under test
   # due to the limitations of the API, but the OS catches the
   # error, sends it back to the code under test, which deals with
   # it appropriately.  This is just valgrind saying the OS code
   # had to trap it.
   FM_UT_os_closedir_test
   Memcheck:Param
   getdents(dirp)
   fun:__getdents
   fun:readdir
   fun:OS_readdir
   fun:UT_os_closedir_test
   fun:main
}

{
   # Ok, this is just bad unit test code.  I'll address it later.
   UT_os_timerset_test
   Memcheck:Addr4
   fun:timer_settime
   fun:OS_TimerSet
   fun:UT_os_timercallback
   fun:OS_TimerSignalHandler
   obj:/lib/libpthread-2.12.so
   fun:OS_InterruptSafeUnlock
   fun:OS_TimerCreate
   fun:UT_os_timerset_test
   fun:main
}

{
   # This is to supress a valid error that would normally signify
   # bad code.  However, this is encountered due to a negative
   # test.  The failure cannot be caught by the code under test
   # due to the limitations of the API, but the OS catches the
   # error, sends it back to the code under test, which deals with
   # it appropriately.  This is just valgrind saying the OS code
   # had to trap it.
   OSAL_UT_os_closedir_test
   Memcheck:Addr4
   fun:readdir
   fun:OS_readdir
   fun:UT_os_closedir_test
   fun:main
}
